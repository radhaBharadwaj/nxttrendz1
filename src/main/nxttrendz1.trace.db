2024-02-21 02:40:43 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]pragma info product"; expected "PREPARE"; SQL statement:
pragma info product [42001-214]
2024-02-21 02:41:09 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]pragma table info product"; expected "PREPARE"; SQL statement:
pragma table info product [42001-214]
2024-02-21 02:41:16 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]pragma table product"; expected "PREPARE"; SQL statement:
pragma table product [42001-214]
2024-02-21 02:43:20 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]pragma table_info product"; expected "PREPARE"; SQL statement:
pragma table_info product [42001-214]
2024-02-21 02:43:34 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]pragma table_info product"; expected "PREPARE"; SQL statement:
pragma table_info product [42001-214]
2024-02-21 02:44:19 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]PRAGMA table_info(product)"; expected "PREPARE"; SQL statement:
PRAGMA table_info(product) [42001-214]
2024-02-21 02:44:25 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]PRAGMA table_info(product)"; expected "PREPARE"; SQL statement:
PRAGMA table_info(product) [42001-214]
2024-02-21 02:44:52 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]PRAGMA nxttrendz1.table_info(product)"; expected "PREPARE"; SQL statement:
PRAGMA nxttrendz1.table_info(product) [42001-214]
2024-02-21 02:45:19 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]PRAGMA [nxttrendz1].table_info(product)"; expected "PREPARE"; SQL statement:
PRAGMA [nxttrendz1].table_info(product) [42001-214]
2024-02-21 02:45:20 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]PRAGMA [nxttrendz1].table_info(product)"; expected "PREPARE"; SQL statement:
PRAGMA [nxttrendz1].table_info(product) [42001-214]
2024-02-21 02:45:21 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]PRAGMA [nxttrendz1].table_info(product)"; expected "PREPARE"; SQL statement:
PRAGMA [nxttrendz1].table_info(product) [42001-214]
2024-02-21 02:45:21 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]PRAGMA [nxttrendz1].table_info(product)"; expected "PREPARE"; SQL statement:
PRAGMA [nxttrendz1].table_info(product) [42001-214]
2024-02-21 02:45:21 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]PRAGMA [nxttrendz1].table_info(product)"; expected "PREPARE"; SQL statement:
PRAGMA [nxttrendz1].table_info(product) [42001-214]
2024-02-21 02:45:21 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]PRAGMA [nxttrendz1].table_info(product)"; expected "PREPARE"; SQL statement:
PRAGMA [nxttrendz1].table_info(product) [42001-214]
2024-02-21 02:45:40 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "[*]PRAGMA [nxttrendz1.]table_info(product)"; expected "PREPARE"; SQL statement:
PRAGMA [nxttrendz1.]table_info(product) [42001-214]
2024-02-21 02:52:39 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "CREATE TABLE [*]if not exist product ( productId INT PRIMARY KEY AUTO_INCREMENT, productName VARCHAR(255), price FLOAT )"; expected "identifier"; SQL statement:
CREATE TABLE if not exist product ( productId INT PRIMARY KEY AUTO_INCREMENT, productName VARCHAR(255), price FLOAT ) [42001-214]
2024-02-21 03:01:54 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "CREATE TABLE [*]if not exist product ( productId INT PRIMARY KEY AUTO_INCREMENT, productName VARCHAR(255), price FLOAT )"; expected "identifier"; SQL statement:
CREATE TABLE if not exist product ( productId INT PRIMARY KEY AUTO_INCREMENT, productName VARCHAR(255), price FLOAT ) [42001-214]
2024-02-21 03:03:33 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "CREATE TABLE [*]if not exist product ( productId INT PRIMARY KEY AUTO_INCREMENT, productName VARCHAR(255), price FLOAT )"; expected "identifier"; SQL statement:
CREATE TABLE if not exist product ( productId INT PRIMARY KEY AUTO_INCREMENT, productName VARCHAR(255), price FLOAT ) [42001-214]
2024-02-21 03:50:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "SMARTPHONE" not found; SQL statement:
insert into product(productname,price) values(Smartphone,599.99) [42122-214]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:477)
	at org.h2.message.DbException.get(DbException.java:223)
	at org.h2.message.DbException.get(DbException.java:199)
	at org.h2.expression.ExpressionColumn.getColumnException(ExpressionColumn.java:244)
	at org.h2.expression.ExpressionColumn.optimizeOther(ExpressionColumn.java:226)
	at org.h2.expression.ExpressionColumn.optimize(ExpressionColumn.java:213)
	at org.h2.command.dml.Insert.doPrepare(Insert.java:300)
	at org.h2.command.dml.DataChangeStatement.prepare(DataChangeStatement.java:37)
	at org.h2.command.Parser.prepareCommand(Parser.java:575)
	at org.h2.engine.SessionLocal.prepareLocal(SessionLocal.java:631)
	at org.h2.engine.SessionLocal.prepareCommand(SessionLocal.java:554)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1116)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:237)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:223)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:731)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:307)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1303)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1292)
	at com.example.nxttrendz1.NxtTrendzApplication.main(NxtTrendzApplication.java:11)
